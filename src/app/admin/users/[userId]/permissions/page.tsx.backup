"use client";

import { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import { Container } from "@/components/Container";
import { Breadcrumbs } from "@/components/Breadcrumbs";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import Link from "next/link";
import { supabase } from "@/lib/supabase";
import { 
  ArrowLeft, 
  Save, 
  Shield, 
  Globe, 
  Target, 
  Settings,
  CheckCircle,
  AlertCircle,
  Trash
} from "lucide-react";

interface ModelPermission {
  model_id: string;
  model_name: string;
  provider: string;
  daily_limit: number;
  token_limit: number;
  enabled: boolean;
}

interface UserPermissions {
  user_id: string;
  can_access_shadowing: boolean;
  can_access_cloze: boolean;
  can_access_alignment: boolean;
  can_access_articles: boolean;
  allowed_languages: string[];
  allowed_levels: number[];
  max_daily_attempts: number;
  model_permissions: ModelPermission[];
  api_keys?: {
    deepseek?: string;
    openrouter?: string;
  };
  ai_enabled: boolean; // 新增：AI功能总开关
  custom_restrictions: Record<string, any>;
}

interface UserProfile {
  id: string;
  email: string;
  username?: string;
  role: 'admin' | 'user';
}

const AVAILABLE_LANGUAGES = [
  { code: 'en', name: '英语' },
  { code: 'ja', name: '日语' },
  { code: 'zh', name: '中文' }
];

const AVAILABLE_LEVELS = [
  { level: 1, name: '初级' },
  { level: 2, name: '初中级' },
  { level: 3, name: '中级' },
  { level: 4, name: '中高级' },
  { level: 5, name: '高级' }
];

export default function UserPermissionsPage() {
  const params = useParams();
  const userId = params.userId as string;
  
  const [user, setUser] = useState<UserProfile | null>(null);
  const [permissions, setPermissions] = useState<UserPermissions | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);

  useEffect(() => {
    if (userId) {
      fetchUserAndPermissions();
    }
  }, [userId]);

  const fetchUserAndPermissions = async () => {
    setLoading(true);
    try {
      // 首先检查用户ID是否有效
      if (!userId || userId === 'undefined' || userId === 'null') {
        throw new Error('无效的用户ID');
      }

      // 获取用户认证信息
      const { data: { session } } = await supabase.auth.getSession();
      
      if (!session) {
        throw new Error('请先登录才能访问管理员页面');
      }

      // 使用API路由获取用户信息，绕过RLS限制，包含认证头
      const response = await fetch('/api/admin/users?page=1&limit=100&search=&role=all', {
        headers: {
          'Authorization': `Bearer ${session.access_token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error(`API请求失败: ${response.status}`);
      }
      
      const data = await response.json();
      const users = data.users || [];
      
      // 查找指定用户
      const user = users.find((u: any) => u.id === userId);

      if (!user) {
        throw new Error('用户不存在');
      }
      setUser(user);

      // 获取权限设置
      const { data: permissions, error: permissionsError } = await supabase
        .from('user_permissions')
        .select('*')
        .eq('user_id', userId)
        .single();

      // 如果表不存在或没有权限记录，创建默认权限
      if (permissionsError && (permissionsError.code === 'PGRST116' || permissionsError.message.includes('relation') && permissionsError.message.includes('does not exist'))) {
        console.log('权限表不存在或没有记录，使用默认权限');
        const defaultPermissions: UserPermissions = {
          user_id: userId,
          can_access_shadowing: true,
          can_access_cloze: true,
          can_access_alignment: true,
          can_access_articles: true,
          allowed_languages: ['en', 'ja', 'zh'],
          allowed_levels: [1, 2, 3, 4, 5],
          max_daily_attempts: 50,
          model_permissions: [
            {
              model_id: 'deepseek-chat',
              model_name: 'DeepSeek Chat',
              provider: 'deepseek',
              daily_limit: 50,
              token_limit: 100000,
              enabled: true
            },
            {
              model_id: 'openrouter/auto',
              model_name: 'OpenRouter Auto (推荐)',
              provider: 'openrouter',
              daily_limit: 30,
              token_limit: 80000,
              enabled: true
            }
          ],
          api_keys: {
            deepseek: '',
            openrouter: ''
          },
          ai_enabled: false, // 默认关闭AI功能
          custom_restrictions: {}
        };
        setPermissions(defaultPermissions);
      } else if (permissionsError) {
        console.error('获取权限设置失败:', permissionsError);
        throw new Error('获取权限设置失败');
      } else if (permissions) {
        // 确保model_permissions字段存在
        const permissionsWithDefaults = {
          ...permissions,
          model_permissions: permissions.model_permissions || [
            {
              model_id: 'deepseek-chat',
              model_name: 'DeepSeek Chat',
              provider: 'deepseek',
              daily_limit: 50,
              token_limit: 100000,
              enabled: true
            },
            {
              model_id: 'gpt-4o',
              model_name: 'GPT-4o',
              provider: 'openai',
              daily_limit: 20,
              token_limit: 50000,
              enabled: true
            },
            {
              model_id: 'claude-3.5-sonnet',
              model_name: 'Claude 3.5 Sonnet',
              provider: 'anthropic',
              daily_limit: 30,
              token_limit: 75000,
              enabled: true
            }
          ],
          api_keys: permissions.api_keys || {
            openai: '',
            deepseek: '',
            openrouter: ''
          }
        };
        setPermissions(permissionsWithDefaults);
      } else {
        // 没有权限记录，创建默认权限
        const defaultPermissions: UserPermissions = {
          user_id: userId,
          can_access_shadowing: true,
          can_access_cloze: true,
          can_access_alignment: true,
          can_access_articles: true,
          allowed_languages: ['en', 'ja', 'zh'],
          allowed_levels: [1, 2, 3, 4, 5],
          max_daily_attempts: 50,
          model_permissions: [
            {
              model_id: 'deepseek-chat',
              model_name: 'DeepSeek Chat',
              provider: 'deepseek',
              daily_limit: 50,
              token_limit: 100000,
              enabled: true
            },
            {
              model_id: 'openrouter/auto',
              model_name: 'OpenRouter Auto (推荐)',
              provider: 'openrouter',
              daily_limit: 30,
              token_limit: 80000,
              enabled: true
            }
          ],
          api_keys: {
            deepseek: '',
            openrouter: ''
          },
          ai_enabled: false, // 默认关闭AI功能
          custom_restrictions: {}
        };
        setPermissions(defaultPermissions);
      }
    } catch (error) {
      console.error('获取数据失败:', error);
      setMessage({ type: 'error', text: '获取数据失败' });
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    if (!permissions) return;

    setSaving(true);
    setMessage(null);

    try {
      // 创建一个不包含model_permissions的权限对象，因为字段还不存在
      const permissionsToSave = {
        user_id: permissions.user_id,
        can_access_shadowing: permissions.can_access_shadowing,
        can_access_cloze: permissions.can_access_cloze,
        can_access_alignment: permissions.can_access_alignment,
        can_access_articles: permissions.can_access_articles,
        allowed_languages: permissions.allowed_languages,
        allowed_levels: permissions.allowed_levels,
        max_daily_attempts: permissions.max_daily_attempts,
        api_keys: permissions.api_keys,
        ai_enabled: permissions.ai_enabled,
        custom_restrictions: permissions.custom_restrictions
      };
      
      const { error } = await supabase
        .from('user_permissions')
        .upsert(permissionsToSave, { 
          onConflict: 'user_id',
          ignoreDuplicates: false 
        });

      if (error) {
        console.error('保存权限失败:', error);
        if (error.message.includes('relation') && error.message.includes('does not exist')) {
          setMessage({ type: 'error', text: '权限表不存在，请先在Supabase中执行数据库迁移' });
        } else if (error.message.includes('model_permissions')) {
          setMessage({ type: 'warning', text: '基础权限已保存，但模型权限功能需要数据库更新。请在Supabase Dashboard中执行SQL添加model_permissions字段。' });
        } else {
          throw new Error('保存权限设置失败');
        }
      } else {
        setMessage({ type: 'success', text: '基础权限已保存（模型权限功能需要数据库更新）' });
      }
    } catch (error) {
      console.error('保存失败:', error);
      setMessage({ type: 'error', text: '保存失败，请重试' });
    } finally {
      setSaving(false);
    }
  };

  const handlePermissionChange = (key: keyof UserPermissions, value: any) => {
    if (!permissions) return;
    setPermissions({ ...permissions, [key]: value });
  };

  const handleLanguageToggle = (langCode: string) => {
    if (!permissions) return;
    const newLanguages = permissions.allowed_languages.includes(langCode)
      ? permissions.allowed_languages.filter(l => l !== langCode)
      : [...permissions.allowed_languages, langCode];
    handlePermissionChange('allowed_languages', newLanguages);
  };

  const handleLevelToggle = (level: number) => {
    if (!permissions) return;
    const newLevels = permissions.allowed_levels.includes(level)
      ? permissions.allowed_levels.filter(l => l !== level)
      : [...permissions.allowed_levels, level];
    handlePermissionChange('allowed_levels', newLevels);
  };

  const handleModelPermissionChange = (modelId: string, field: keyof ModelPermission, value: any) => {
    if (!permissions) return;
    const newModelPermissions = (permissions.model_permissions || []).map(model => 
      model.model_id === modelId ? { ...model, [field]: value } : model
    );
    handlePermissionChange('model_permissions', newModelPermissions);
  };

  const addModelPermission = () => {
    if (!permissions) return;
    const newModel: ModelPermission = {
      model_id: '',
      model_name: '',
      provider: 'deepseek',
      daily_limit: 10,
      token_limit: 10000,
      enabled: true
    };
    handlePermissionChange('model_permissions', [...(permissions.model_permissions || []), newModel]);
  };

  const removeModelPermission = (modelId: string) => {
    if (!permissions) return;
    const newModelPermissions = (permissions.model_permissions || []).filter(model => model.model_id !== modelId);
    handlePermissionChange('model_permissions', newModelPermissions);
  };

  if (loading) {
    return (
      <Container>
        <div className="flex items-center justify-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
        </div>
      </Container>
    );
  }

  if (!user || !permissions) {
    return (
      <Container>
        <div className="text-center py-8">
          <h2 className="text-2xl font-bold mb-4">
            {message ? message.text : '用户不存在'}
          </h2>
          <Link href="/admin/users">
            <Button>返回用户列表</Button>
          </Link>
        </div>
      </Container>
    );
  }

  return (
    <Container>
      <div className="space-y-6">
        {/* 头部 */}
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Link href={`/admin/users/${userId}`}>
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                返回
              </Button>
            </Link>
            <div>
              <h1 className="text-3xl font-bold">权限管理</h1>
              <p className="text-muted-foreground">
                管理 {user.username || `用户 ${user.id.slice(0, 8)}`} 的访问权限
              </p>
            </div>
          </div>
          <Button onClick={handleSave} disabled={saving}>
            <Save className="h-4 w-4 mr-2" />
            {saving ? '保存中...' : '保存设置'}
          </Button>
        </div>

        <Breadcrumbs items={[
          { label: "管理员", href: "/admin" },
          { label: "用户管理", href: "/admin/users" },
          { label: user.username || `用户 ${user.id.slice(0, 8)}`, href: `/admin/users/${userId}` },
          { label: "权限管理", href: `/admin/users/${userId}/permissions` }
        ]} />

        {/* 消息提示 */}
        {message && (
          <Alert className={message.type === 'success' ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'}>
            <div className="flex items-center gap-2">
              {message.type === 'success' ? (
                <CheckCircle className="h-4 w-4 text-green-600" />
              ) : (
                <AlertCircle className="h-4 w-4 text-red-600" />
              )}
              <AlertDescription className={message.type === 'success' ? 'text-green-800' : 'text-red-800'}>
                {message.text}
              </AlertDescription>
            </div>
          </Alert>
        )}

        <Tabs defaultValue="access" className="space-y-6">
          <TabsList>
            <TabsTrigger value="access">访问权限</TabsTrigger>
            <TabsTrigger value="content">内容权限</TabsTrigger>
            <TabsTrigger value="limits">模型控制</TabsTrigger>
            <TabsTrigger value="api-keys">API密钥</TabsTrigger>
          </TabsList>

          <TabsContent value="access" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="h-5 w-5" />
                  功能访问权限
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <Label htmlFor="shadowing">Shadowing 练习</Label>
                        <p className="text-sm text-muted-foreground">
                          允许用户访问 Shadowing 练习功能
                        </p>
                      </div>
                      <Switch
                        id="shadowing"
                        checked={permissions.can_access_shadowing}
                        onCheckedChange={(checked) => 
                          handlePermissionChange('can_access_shadowing', checked)
                        }
                      />
                    </div>

                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <Label htmlFor="cloze">Cloze 练习</Label>
                        <p className="text-sm text-muted-foreground">
                          允许用户访问 Cloze 填空练习功能
                        </p>
                      </div>
                      <Switch
                        id="cloze"
                        checked={permissions.can_access_cloze}
                        onCheckedChange={(checked) => 
                          handlePermissionChange('can_access_cloze', checked)
                        }
                      />
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <Label htmlFor="alignment">Alignment 练习</Label>
                        <p className="text-sm text-muted-foreground">
                          允许用户访问对齐训练功能
                        </p>
                      </div>
                      <Switch
                        id="alignment"
                        checked={permissions.can_access_alignment}
                        onCheckedChange={(checked) => 
                          handlePermissionChange('can_access_alignment', checked)
                        }
                      />
                    </div>

                    <div className="flex items-center justify-between">
                      <div className="space-y-0.5">
                        <Label htmlFor="articles">广读文章</Label>
                        <p className="text-sm text-muted-foreground">
                          允许用户访问广读文章功能
                        </p>
                      </div>
                      <Switch
                        id="articles"
                        checked={permissions.can_access_articles}
                        onCheckedChange={(checked) => 
                          handlePermissionChange('can_access_articles', checked)
                        }
                      />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="content" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Globe className="h-5 w-5" />
                    允许的语言
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {AVAILABLE_LANGUAGES.map((lang) => (
                    <div key={lang.code} className="flex items-center space-x-2">
                      <Checkbox
                        id={`lang-${lang.code}`}
                        checked={permissions.allowed_languages.includes(lang.code)}
                        onCheckedChange={() => handleLanguageToggle(lang.code)}
                      />
                      <Label htmlFor={`lang-${lang.code}`} className="text-sm font-medium">
                        {lang.name} ({lang.code.toUpperCase()})
                      </Label>
                    </div>
                  ))}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Target className="h-5 w-5" />
                    允许的等级
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {AVAILABLE_LEVELS.map((level) => (
                    <div key={level.level} className="flex items-center space-x-2">
                      <Checkbox
                        id={`level-${level.level}`}
                        checked={permissions.allowed_levels.includes(level.level)}
                        onCheckedChange={() => handleLevelToggle(level.level)}
                      />
                      <Label htmlFor={`level-${level.level}`} className="text-sm font-medium">
                        等级 {level.level} - {level.name}
                      </Label>
                    </div>
                  ))}
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          <TabsContent value="limits" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings className="h-5 w-5" />
                  AI模型访问控制
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-lg font-medium">模型权限管理</h3>
                      <p className="text-sm text-muted-foreground">
                        配置用户可以访问的AI模型、每日使用次数和token限制
                      </p>
                    </div>
                    <Button onClick={addModelPermission} size="sm">
                      添加模型
                    </Button>
                  </div>

                  <div className="space-y-4">
                    {(permissions.model_permissions || []).map((model, index) => (
                      <div key={model.model_id || index} className="p-4 border rounded-lg space-y-4">
                        <div className="flex items-center justify-between">
                          <h4 className="font-medium">
                            {model.model_name || `模型 ${index + 1}`}
                          </h4>
                          <div className="flex items-center gap-2">
                            <Switch
                              checked={model.enabled}
                              onCheckedChange={(checked) => 
                                handleModelPermissionChange(model.model_id, 'enabled', checked)
                              }
                            />
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => removeModelPermission(model.model_id)}
                            >
                              <Trash className="h-4 w-4 mr-1" />
                              删除
                            </Button>
                          </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                          <div>
                            <Label htmlFor={`model-id-${index}`}>模型ID</Label>
                            <Input
                              id={`model-id-${index}`}
                              value={model.model_id}
                              onChange={(e) => 
                                handleModelPermissionChange(model.model_id, 'model_id', e.target.value)
                              }
                              placeholder="deepseek-chat"
                            />
                          </div>
                          <div>
                            <Label htmlFor={`model-name-${index}`}>模型名称</Label>
                            <Input
                              id={`model-name-${index}`}
                              value={model.model_name}
                              onChange={(e) => 
                                handleModelPermissionChange(model.model_id, 'model_name', e.target.value)
                              }
                              placeholder="DeepSeek Chat"
                            />
                          </div>
                          <div>
                            <Label htmlFor={`provider-${index}`}>提供商</Label>
                            <Select
                              value={model.provider}
                              onValueChange={(value) => 
                                handleModelPermissionChange(model.model_id, 'provider', value)
                              }
                            >
                              <SelectTrigger>
                                <SelectValue />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="deepseek">DeepSeek</SelectItem>
                                <SelectItem value="openrouter">OpenRouter (推荐)</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                          <div>
                            <Label htmlFor={`daily-limit-${index}`}>每日次数限制</Label>
                            <Input
                              id={`daily-limit-${index}`}
                              type="number"
                              min="0"
                              value={model.daily_limit}
                              onChange={(e) => 
                                handleModelPermissionChange(model.model_id, 'daily_limit', parseInt(e.target.value) || 0)
                              }
                            />
                          </div>
                          <div>
                            <Label htmlFor={`token-limit-${index}`}>Token限制</Label>
                            <Input
                              id={`token-limit-${index}`}
                              type="number"
                              min="0"
                              value={model.token_limit}
                              onChange={(e) => 
                                handleModelPermissionChange(model.model_id, 'token_limit', parseInt(e.target.value) || 0)
                              }
                            />
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label>当前权限摘要</Label>
                  <div className="p-4 bg-muted rounded-lg space-y-2">
                    <div className="text-sm">
                      <strong>可访问功能：</strong>
                      {[
                        permissions.can_access_shadowing && 'Shadowing',
                        permissions.can_access_cloze && 'Cloze',
                        permissions.can_access_alignment && 'Alignment',
                        permissions.can_access_articles && '广读文章'
                      ].filter(Boolean).join(', ') || '无'}
                    </div>
                    <div className="text-sm">
                      <strong>允许语言：</strong>
                      {permissions.allowed_languages.map(lang => 
                        AVAILABLE_LANGUAGES.find(l => l.code === lang)?.name || lang
                      ).join(', ') || '无'}
                    </div>
                    <div className="text-sm">
                      <strong>允许等级：</strong>
                      {permissions.allowed_levels.sort().join(', ') || '无'}
                    </div>
                    <div className="text-sm">
                    <strong>可用模型：</strong>
                    {(permissions.model_permissions || [])
                      .filter(m => m.enabled)
                      .map(m => `${m.model_name} (${m.daily_limit}次/日, ${m.token_limit} tokens)`)
                      .join(', ') || '无'}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
          {/* API密钥管理 */}
          <TabsContent value="api-keys" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings className="h-5 w-5" />
                  AI功能配置
                </CardTitle>
                <p className="text-sm text-muted-foreground">
                  启用AI功能并配置API密钥，用户将能够使用AI生成内容
                </p>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* AI功能总开关 */}
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <Label className="text-base font-medium">启用AI功能</Label>
                      <p className="text-sm text-muted-foreground">
                        开启后用户可以使用AI生成内容，需要配置API密钥
                      </p>
                    </div>
                    <Switch
                      checked={permissions?.ai_enabled || false}
                      onCheckedChange={(checked) => handlePermissionChange('ai_enabled', checked)}
                    />
                  </div>
                </div>

                {/* API密钥配置 - 只有开启AI功能时才显示 */}
                {permissions?.ai_enabled && (
                  <div className="space-y-4">
                    <div>
                      <Label className="text-base font-medium">API密钥配置</Label>
                      <p className="text-sm text-muted-foreground mb-4">
                        配置一个API密钥即可使用所有AI功能，推荐使用OpenRouter
                      </p>
                    </div>
                    
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <Label htmlFor="openrouter-key">OpenRouter API Key (推荐)</Label>
                        <Input
                          id="openrouter-key"
                          type="password"
                          placeholder="sk-or-..."
                          value={permissions?.api_keys?.openrouter || ''}
                          onChange={(e) => handlePermissionChange('api_keys', {
                            ...permissions?.api_keys,
                            openrouter: e.target.value
                          })}
                        />
                        <p className="text-xs text-muted-foreground">
                          推荐使用OpenRouter，可以访问多种AI模型，性价比高
                        </p>
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="deepseek-key">DeepSeek API Key (可选)</Label>
                        <Input
                          id="deepseek-key"
                          type="password"
                          placeholder="sk-..."
                          value={permissions?.api_keys?.deepseek || ''}
                          onChange={(e) => handlePermissionChange('api_keys', {
                            ...permissions?.api_keys,
                            deepseek: e.target.value
                          })}
                        />
                        <p className="text-xs text-muted-foreground">
                          可选，如果配置了DeepSeek密钥，将优先使用DeepSeek模型
                        </p>
                      </div>
                    </div>
                  </div>
                )}

                {/* 模型配置 - 只有开启AI功能时才显示 */}
                {permissions?.ai_enabled && (
                  <div className="space-y-4">
                    <div>
                      <Label className="text-base font-medium">可用模型配置</Label>
                      <p className="text-sm text-muted-foreground mb-4">
                        配置用户可以访问的AI模型及其使用限制
                      </p>
                    </div>
                  
                    <div className="space-y-4">
                      {permissions?.model_permissions?.map((model, index) => (
                        <div key={model.model_id || index} className="p-4 border rounded-lg space-y-4">
                          <div className="flex items-center justify-between">
                            <h4 className="font-medium">
                              {model.model_name || `模型 ${index + 1}`}
                            </h4>
                            <div className="flex items-center gap-2">
                              <Switch
                                checked={model.enabled}
                                onCheckedChange={(checked) => 
                                  handleModelPermissionChange(model.model_id, 'enabled', checked)
                                }
                              />
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => removeModelPermission(model.model_id)}
                              >
                                <Trash className="h-4 w-4 mr-1" />
                                删除
                              </Button>
                            </div>
                          </div>

                          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                            <div>
                              <Label htmlFor={`model-id-${index}`}>模型ID</Label>
                              <Input
                                id={`model-id-${index}`}
                                value={model.model_id}
                                onChange={(e) => 
                                  handleModelPermissionChange(model.model_id, 'model_id', e.target.value)
                                }
                                placeholder="deepseek-chat"
                              />
                            </div>
                          <div>
                            <Label htmlFor={`model-name-${index}`}>模型名称</Label>
                            <Input
                              id={`model-name-${index}`}
                              value={model.model_name}
                              onChange={(e) => 
                                handleModelPermissionChange(model.model_id, 'model_name', e.target.value)
                              }
                              placeholder="DeepSeek Chat"
                            />
                          </div>
                          <div>
                            <Label htmlFor={`provider-${index}`}>提供商</Label>
                            <Select
                              value={model.provider}
                              onValueChange={(value) => 
                                handleModelPermissionChange(model.model_id, 'provider', value)
                              }
                            >
                              <SelectTrigger>
                                <SelectValue />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="deepseek">DeepSeek</SelectItem>
                                <SelectItem value="openrouter">OpenRouter (推荐)</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                          <div>
                            <Label htmlFor={`daily-limit-${index}`}>每日限制</Label>
                            <Input
                              id={`daily-limit-${index}`}
                              type="number"
                              value={model.daily_limit}
                              onChange={(e) => 
                                handleModelPermissionChange(model.model_id, 'daily_limit', parseInt(e.target.value) || 0)
                              }
                              placeholder="50"
                            />
                          </div>
                          <div>
                            <Label htmlFor={`token-limit-${index}`}>Token限制</Label>
                            <Input
                              id={`token-limit-${index}`}
                              type="number"
                              value={model.token_limit}
                              onChange={(e) => 
                                handleModelPermissionChange(model.model_id, 'token_limit', parseInt(e.target.value) || 0)
                              }
                              placeholder="100000"
                            />
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  <Button onClick={addModelPermission} size="sm" variant="outline">
                    添加模型
                  </Button>
                </div>

                    <div className="space-y-2">
                      <Label>当前配置摘要</Label>
                      <div className="p-4 bg-muted rounded-lg space-y-2">
                        <div className="text-sm">
                          <strong>API密钥：</strong>
                          {permissions?.api_keys ? 
                            Object.entries(permissions.api_keys)
                              .filter(([_, value]) => value)
                              .map(([key, _]) => key)
                              .join(', ') || '无' : '无'}
                        </div>
                        <div className="text-sm">
                          <strong>可用模型：</strong>
                          {(permissions?.model_permissions || [])
                            .filter(m => m.enabled)
                            .map(m => `${m.model_name} (${m.daily_limit}次/日, ${m.token_limit} tokens)`)
                            .join(', ') || '无'}
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </Container>
  );
}
