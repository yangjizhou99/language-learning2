name: Deploy to PRODUCTION

on:
  push:
    branches: [main]
  workflow_dispatch:

# Èò≤Ê≠¢ÂêåÊó∂ÈÉ®ÁΩ≤Âà∞Áîü‰∫ßÁéØÂ¢ÉÔºàÂÖ≥ÈîÆÂÆâÂÖ®Êé™ÊñΩÔºâ
concurrency:
  group: deploy-production
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_ID: ${{ secrets.PROD_PROJECT_ID }}
      SUPABASE_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ÁºìÂ≠ò Supabase CLI ÂíåÈÖçÁΩÆ
      - name: Cache Supabase CLI
        uses: actions/cache@v4
        with:
          path: |
            ~/.supabase
          key: ${{ runner.os }}-supabase-cli-${{ hashFiles('supabase/config.toml') }}
          restore-keys: |
            ${{ runner.os }}-supabase-cli-

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Validate environment (production)
        run: |
          echo "üîí Validating production environment variables..."
          if [[ -z "$SUPABASE_PROJECT_ID" ]]; then
            echo "‚ùå PROD_PROJECT_ID is not set" >&2
            exit 1
          fi
          if [[ ! "$SUPABASE_PROJECT_ID" =~ ^[a-z0-9]{20}$ ]]; then
            echo "‚ùå Invalid project ref format. Must be like 'abcdefghijklmnopqrst' (20 lowercase letters/numbers)." >&2
            exit 1
          fi
          echo "‚úÖ Production environment validated"

      - name: Link remote (production)
        run: |
          echo "üì° Linking to PRODUCTION project ($SUPABASE_PROJECT_ID)..."
          supabase link --debug --project-ref $SUPABASE_PROJECT_ID --password $SUPABASE_DB_PASSWORD
          echo "‚úÖ Linked successfully"

      - name: Push migrations with retry (production)
        run: |
          echo "üöÄ Pushing migrations to PRODUCTION..."
          echo "‚ö†Ô∏è  Using --include-all flag to apply all local migrations"
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          until supabase db push --include-all || [ $RETRY_COUNT -eq $MAX_RETRIES ]; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "‚ö†Ô∏è  Push failed, retrying ($RETRY_COUNT/$MAX_RETRIES)..."
            sleep 10
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "‚ùå Failed to push migrations after $MAX_RETRIES attempts"
            exit 1
          fi
          echo "‚úÖ Migrations pushed successfully to production"

      - name: Verify deployment (production)
        run: |
          echo "üîç Verifying schema integrity on production..."
          supabase db diff --schema public > schema_diff_prod.sql || true
          if [ -s schema_diff_prod.sql ]; then
            echo "‚ö†Ô∏è  Schema drift detected on production:"
            cat schema_diff_prod.sql
            exit 1
          else
            echo "‚úÖ No schema drift - production deployment verified"
          fi
          
          echo ""
          echo "üéâ Production Deployment Summary:"
          echo "   Environment: PRODUCTION"
          echo "   Project: $SUPABASE_PROJECT_ID"
          echo "   Status: ‚úÖ SUCCESS"
          echo "   Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"


