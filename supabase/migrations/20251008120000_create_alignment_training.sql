-- Alignment training schema (themes, subtopics, materials, attempts)
-- Generated by Codex plan for new alignment practice feature

BEGIN;

-- Ensure pgcrypto for gen_random_uuid()
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- 1. Themes
CREATE TABLE IF NOT EXISTS public.alignment_themes (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  lang text NOT NULL CHECK (lang IN ('en','ja','zh')),
  level int NOT NULL CHECK (level BETWEEN 1 AND 6),
  genre text NOT NULL CHECK (genre IN ('dialogue','article','task_email','long_writing')),
  title text NOT NULL,
  title_translations jsonb NOT NULL DEFAULT '{}'::jsonb,
  title_normalized text NOT NULL,
  summary text,
  summary_translations jsonb NOT NULL DEFAULT '{}'::jsonb,
  status text NOT NULL DEFAULT 'draft' CHECK (status IN ('draft','active','archived')),
  created_by uuid,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now()
);

CREATE UNIQUE INDEX IF NOT EXISTS alignment_themes_unique_lang_level_genre_title
  ON public.alignment_themes (lang, level, genre, title_normalized);

CREATE INDEX IF NOT EXISTS alignment_themes_status_idx
  ON public.alignment_themes (status);

-- 2. Subtopics
CREATE TABLE IF NOT EXISTS public.alignment_subtopics (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  theme_id uuid NOT NULL REFERENCES public.alignment_themes(id) ON DELETE CASCADE,
  lang text NOT NULL CHECK (lang IN ('en','ja','zh')),
  level int NOT NULL CHECK (level BETWEEN 1 AND 6),
  genre text NOT NULL CHECK (genre IN ('dialogue','article','task_email','long_writing')),
  title text NOT NULL,
  title_translations jsonb NOT NULL DEFAULT '{}'::jsonb,
  title_normalized text NOT NULL,
  one_line text,
  one_line_translations jsonb NOT NULL DEFAULT '{}'::jsonb,
  objectives jsonb NOT NULL DEFAULT '[]'::jsonb,
  status text NOT NULL DEFAULT 'draft' CHECK (status IN ('draft','needs_review','active','archived')),
  created_by uuid,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now()
);

CREATE UNIQUE INDEX IF NOT EXISTS alignment_subtopics_unique_theme_title
  ON public.alignment_subtopics (theme_id, title_normalized);

CREATE INDEX IF NOT EXISTS alignment_subtopics_status_idx
  ON public.alignment_subtopics (status);

-- 3. Materials (training pack per subtopic)
CREATE TABLE IF NOT EXISTS public.alignment_materials (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  subtopic_id uuid NOT NULL REFERENCES public.alignment_subtopics(id) ON DELETE CASCADE,
  lang text NOT NULL CHECK (lang IN ('en','ja','zh')),
  task_type text NOT NULL CHECK (task_type IN ('dialogue','article','task_email','long_writing')),
  status text NOT NULL DEFAULT 'draft' CHECK (status IN ('draft','pending_review','active','archived')),
  version int NOT NULL DEFAULT 1,
  is_current boolean NOT NULL DEFAULT true,
  task_prompt text NOT NULL,
  task_prompt_translations jsonb NOT NULL DEFAULT '{}'::jsonb,
  exemplar text NOT NULL,
  exemplar_translations jsonb NOT NULL DEFAULT '{}'::jsonb,
  knowledge_points jsonb NOT NULL DEFAULT '{}'::jsonb,
  requirements jsonb NOT NULL DEFAULT '[]'::jsonb,
  standard_answer text NOT NULL,
  standard_answer_translations jsonb NOT NULL DEFAULT '{}'::jsonb,
  core_sentences jsonb NOT NULL DEFAULT '[]'::jsonb,
  rubric jsonb NOT NULL DEFAULT '{}'::jsonb,
  dialogue_meta jsonb NOT NULL DEFAULT '{}'::jsonb,
  writing_meta jsonb NOT NULL DEFAULT '{}'::jsonb,
  ai_metadata jsonb NOT NULL DEFAULT '{}'::jsonb,
  review_status text NOT NULL DEFAULT 'pending' CHECK (review_status IN ('pending','approved','rejected')),
  review_notes text,
  reviewed_by uuid,
  reviewed_at timestamptz,
  created_by uuid,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now()
);

-- Ensure new columns exist when table already present from older builds
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS subtopic_id uuid;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS lang text;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS task_type text;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS status text;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS version int DEFAULT 1;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS is_current boolean DEFAULT true;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS task_prompt text;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS task_prompt_translations jsonb DEFAULT '{}'::jsonb;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS exemplar text;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS exemplar_translations jsonb DEFAULT '{}'::jsonb;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS knowledge_points jsonb DEFAULT '{}'::jsonb;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS requirements jsonb DEFAULT '[]'::jsonb;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS standard_answer text;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS standard_answer_translations jsonb DEFAULT '{}'::jsonb;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS core_sentences jsonb DEFAULT '[]'::jsonb;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS rubric jsonb DEFAULT '{}'::jsonb;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS dialogue_meta jsonb DEFAULT '{}'::jsonb;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS writing_meta jsonb DEFAULT '{}'::jsonb;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS ai_metadata jsonb DEFAULT '{}'::jsonb;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS review_status text DEFAULT 'pending';
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS review_notes text;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS reviewed_by uuid;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS reviewed_at timestamptz;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS created_by uuid;
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS created_at timestamptz DEFAULT now();
ALTER TABLE IF EXISTS public.alignment_materials ADD COLUMN IF NOT EXISTS updated_at timestamptz DEFAULT now();

-- Backfill legacy alignment_materials schema if table already existed
DO $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_tables
    WHERE schemaname = 'public'
      AND tablename = 'alignment_materials'
  ) THEN
    -- subtopic_id
    IF NOT EXISTS (
      SELECT 1
      FROM information_schema.columns
      WHERE table_schema = 'public'
        AND table_name = 'alignment_materials'
        AND column_name = 'subtopic_id'
    ) THEN
      ALTER TABLE public.alignment_materials ADD COLUMN subtopic_id uuid;
    END IF;

    -- lang
    IF NOT EXISTS (
      SELECT 1
      FROM information_schema.columns
      WHERE table_schema = 'public'
        AND table_name = 'alignment_materials'
        AND column_name = 'lang'
    ) THEN
      ALTER TABLE public.alignment_materials ADD COLUMN lang text;
    END IF;

    -- task_type
    IF NOT EXISTS (
      SELECT 1
      FROM information_schema.columns
      WHERE table_schema = 'public'
        AND table_name = 'alignment_materials'
        AND column_name = 'task_type'
    ) THEN
      ALTER TABLE public.alignment_materials ADD COLUMN task_type text;
    END IF;

    -- status
    IF NOT EXISTS (
      SELECT 1
      FROM information_schema.columns
      WHERE table_schema = 'public'
        AND table_name = 'alignment_materials'
        AND column_name = 'status'
    ) THEN
      ALTER TABLE public.alignment_materials ADD COLUMN status text;
    END IF;

    -- is_current
    IF NOT EXISTS (
      SELECT 1
      FROM information_schema.columns
      WHERE table_schema = 'public'
        AND table_name = 'alignment_materials'
        AND column_name = 'is_current'
    ) THEN
      ALTER TABLE public.alignment_materials ADD COLUMN is_current boolean DEFAULT true;
    END IF;

    -- review_status
    IF NOT EXISTS (
      SELECT 1
      FROM information_schema.columns
      WHERE table_schema = 'public'
        AND table_name = 'alignment_materials'
        AND column_name = 'review_status'
    ) THEN
      ALTER TABLE public.alignment_materials ADD COLUMN review_status text DEFAULT 'pending';
    END IF;
  END IF;
END
$$;

-- Ensure constraints/defaults on legacy table
DO $$
BEGIN
  ALTER TABLE public.alignment_materials
    ALTER COLUMN subtopic_id SET NOT NULL,
    ALTER COLUMN lang SET NOT NULL,
    ALTER COLUMN task_type SET NOT NULL,
    ALTER COLUMN status SET NOT NULL,
    ALTER COLUMN is_current SET NOT NULL,
    ALTER COLUMN review_status SET NOT NULL;
EXCEPTION
  WHEN others THEN
    NULL;
END
$$;

DO $$
BEGIN
  ALTER TABLE public.alignment_materials
    ALTER COLUMN status SET DEFAULT 'draft';
EXCEPTION
  WHEN others THEN
    NULL;
END
$$;

DO $$
BEGIN
  ALTER TABLE public.alignment_materials
    ALTER COLUMN is_current SET DEFAULT true;
EXCEPTION
  WHEN others THEN
    NULL;
END
$$;

DO $$
BEGIN
  ALTER TABLE public.alignment_materials
    ALTER COLUMN review_status SET DEFAULT 'pending';
EXCEPTION
  WHEN others THEN
    NULL;
END
$$;

DO $$
BEGIN
  ALTER TABLE public.alignment_materials
    ADD CONSTRAINT alignment_materials_subtopic_fkey
      FOREIGN KEY (subtopic_id) REFERENCES public.alignment_subtopics(id) ON DELETE CASCADE
      NOT VALID;
EXCEPTION
  WHEN duplicate_object THEN
    NULL;
  WHEN others THEN
    NULL;
END
$$;

CREATE INDEX IF NOT EXISTS alignment_materials_subtopic_idx
  ON public.alignment_materials (subtopic_id);

CREATE INDEX IF NOT EXISTS alignment_materials_status_idx
  ON public.alignment_materials (status);

CREATE UNIQUE INDEX IF NOT EXISTS alignment_materials_current_idx
  ON public.alignment_materials (subtopic_id)
  WHERE is_current;

-- 4. Attempts (learner submissions)
CREATE TABLE IF NOT EXISTS public.alignment_attempts (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  subtopic_id uuid NOT NULL REFERENCES public.alignment_subtopics(id) ON DELETE CASCADE,
  material_id uuid REFERENCES public.alignment_materials(id) ON DELETE SET NULL,
  task_type text NOT NULL CHECK (task_type IN ('dialogue','article','task_email','long_writing')),
  attempt_number int NOT NULL DEFAULT 1,
  submission jsonb NOT NULL,
  submission_text text,
  word_count int,
  turn_count int,
  duration_seconds numeric,
  score_total numeric,
  scores jsonb,
  feedback text,
  feedback_json jsonb,
  ai_model text,
  ai_response jsonb,
  prev_attempt_id uuid REFERENCES public.alignment_attempts(id) ON DELETE SET NULL,
  status text NOT NULL DEFAULT 'completed' CHECK (status IN ('draft','completed','cancelled')),
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now()
);

-- Ensure new columns exist when table already present from older builds
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS subtopic_id uuid;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS material_id uuid;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS task_type text;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS attempt_number int DEFAULT 1;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS submission jsonb;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS submission_text text;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS word_count int;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS turn_count int;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS duration_seconds numeric;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS score_total numeric;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS scores jsonb;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS feedback text;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS feedback_json jsonb;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS ai_model text;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS ai_response jsonb;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS prev_attempt_id uuid;
ALTER TABLE IF EXISTS public.alignment_attempts ADD COLUMN IF NOT EXISTS status text DEFAULT 'completed';

-- Backfill legacy alignment_attempts schema if table already existed
DO $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_tables
    WHERE schemaname = 'public'
      AND tablename = 'alignment_attempts'
  ) THEN
    -- subtopic_id
    IF NOT EXISTS (
      SELECT 1
      FROM information_schema.columns
      WHERE table_schema = 'public'
        AND table_name = 'alignment_attempts'
        AND column_name = 'subtopic_id'
    ) THEN
      ALTER TABLE public.alignment_attempts ADD COLUMN subtopic_id uuid;
    END IF;

    -- material_id
    IF NOT EXISTS (
      SELECT 1
      FROM information_schema.columns
      WHERE table_schema = 'public'
        AND table_name = 'alignment_attempts'
        AND column_name = 'material_id'
    ) THEN
      ALTER TABLE public.alignment_attempts ADD COLUMN material_id uuid;
    END IF;

    -- task_type
    IF NOT EXISTS (
      SELECT 1
      FROM information_schema.columns
      WHERE table_schema = 'public'
        AND table_name = 'alignment_attempts'
        AND column_name = 'task_type'
    ) THEN
      ALTER TABLE public.alignment_attempts ADD COLUMN task_type text;
    END IF;

    -- attempt_number
    IF NOT EXISTS (
      SELECT 1
      FROM information_schema.columns
      WHERE table_schema = 'public'
        AND table_name = 'alignment_attempts'
        AND column_name = 'attempt_number'
    ) THEN
      ALTER TABLE public.alignment_attempts ADD COLUMN attempt_number int DEFAULT 1;
    END IF;

    -- status
    IF NOT EXISTS (
      SELECT 1
      FROM information_schema.columns
      WHERE table_schema = 'public'
        AND table_name = 'alignment_attempts'
        AND column_name = 'status'
    ) THEN
      ALTER TABLE public.alignment_attempts ADD COLUMN status text DEFAULT 'completed';
    END IF;
  END IF;
END
$$;

-- Ensure constraints/defaults on legacy table
DO $$
BEGIN
  ALTER TABLE public.alignment_attempts
    ALTER COLUMN subtopic_id SET NOT NULL,
    ALTER COLUMN task_type SET NOT NULL,
    ALTER COLUMN attempt_number SET NOT NULL,
    ALTER COLUMN submission SET NOT NULL,
    ALTER COLUMN status SET NOT NULL;
EXCEPTION
  WHEN others THEN
    NULL;
END
$$;

DO $$
BEGIN
  ALTER TABLE public.alignment_attempts
    ALTER COLUMN attempt_number SET DEFAULT 1;
EXCEPTION
  WHEN others THEN
    NULL;
END
$$;

DO $$
BEGIN
  ALTER TABLE public.alignment_attempts
    ALTER COLUMN status SET DEFAULT 'completed';
EXCEPTION
  WHEN others THEN
    NULL;
END
$$;

DO $$
BEGIN
  ALTER TABLE public.alignment_attempts
    ADD CONSTRAINT alignment_attempts_subtopic_fkey
      FOREIGN KEY (subtopic_id) REFERENCES public.alignment_subtopics(id) ON DELETE CASCADE
      NOT VALID;
EXCEPTION
  WHEN duplicate_object THEN
    NULL;
  WHEN others THEN
    NULL;
END
$$;

DO $$
BEGIN
  ALTER TABLE public.alignment_attempts
    ADD CONSTRAINT alignment_attempts_material_fkey
      FOREIGN KEY (material_id) REFERENCES public.alignment_materials(id) ON DELETE SET NULL
      NOT VALID;
EXCEPTION
  WHEN duplicate_object THEN
    NULL;
  WHEN others THEN
    NULL;
END
$$;

DO $$
BEGIN
  ALTER TABLE public.alignment_attempts
    ADD CONSTRAINT alignment_attempts_prev_fkey
      FOREIGN KEY (prev_attempt_id) REFERENCES public.alignment_attempts(id) ON DELETE SET NULL
      NOT VALID;
EXCEPTION
  WHEN duplicate_object THEN
    NULL;
  WHEN others THEN
    NULL;
END
$$;

CREATE INDEX IF NOT EXISTS alignment_attempts_user_subtopic_idx
  ON public.alignment_attempts (user_id, subtopic_id, attempt_number);

CREATE INDEX IF NOT EXISTS alignment_attempts_subtopic_created_idx
  ON public.alignment_attempts (subtopic_id, created_at DESC);

CREATE INDEX IF NOT EXISTS alignment_attempts_prev_idx
  ON public.alignment_attempts (prev_attempt_id);

-- Row Level Security
ALTER TABLE public.alignment_themes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.alignment_subtopics ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.alignment_materials ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.alignment_attempts ENABLE ROW LEVEL SECURITY;

-- Policies: themes/subtopics/materials readable by authenticated users; writes limited to service role
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'alignment_themes' AND policyname = 'alignment_themes_select_all'
  ) THEN
    CREATE POLICY alignment_themes_select_all ON public.alignment_themes
      FOR SELECT USING (true);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'alignment_themes' AND policyname = 'alignment_themes_service_write'
  ) THEN
    CREATE POLICY alignment_themes_service_write ON public.alignment_themes
      FOR ALL
      USING (auth.role() = 'service_role')
      WITH CHECK (auth.role() = 'service_role');
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'alignment_subtopics' AND policyname = 'alignment_subtopics_select_all'
  ) THEN
    CREATE POLICY alignment_subtopics_select_all ON public.alignment_subtopics
      FOR SELECT USING (true);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'alignment_subtopics' AND policyname = 'alignment_subtopics_service_write'
  ) THEN
    CREATE POLICY alignment_subtopics_service_write ON public.alignment_subtopics
      FOR ALL
      USING (auth.role() = 'service_role')
      WITH CHECK (auth.role() = 'service_role');
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'alignment_materials' AND policyname = 'alignment_materials_select_active'
  ) THEN
    CREATE POLICY alignment_materials_select_active ON public.alignment_materials
      FOR SELECT USING (status IN ('pending_review','active') OR auth.role() = 'service_role');
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'alignment_materials' AND policyname = 'alignment_materials_service_write'
  ) THEN
    CREATE POLICY alignment_materials_service_write ON public.alignment_materials
      FOR ALL
      USING (auth.role() = 'service_role')
      WITH CHECK (auth.role() = 'service_role');
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'alignment_attempts' AND policyname = 'alignment_attempts_select_own'
  ) THEN
    CREATE POLICY alignment_attempts_select_own ON public.alignment_attempts
      FOR SELECT USING (auth.uid() = user_id);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'alignment_attempts' AND policyname = 'alignment_attempts_insert_own'
  ) THEN
    CREATE POLICY alignment_attempts_insert_own ON public.alignment_attempts
      FOR INSERT WITH CHECK (auth.uid() = user_id);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'alignment_attempts' AND policyname = 'alignment_attempts_update_own'
  ) THEN
    CREATE POLICY alignment_attempts_update_own ON public.alignment_attempts
      FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);
  END IF;
END
$$;

COMMIT;
